// Code generated by go-bindata.
// sources:
// ../../api/data/schema/todo.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ApiDataSchemaTodoJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xb1\x4e\xc3\x30\x10\x86\xf7\x3c\xc5\x2f\x2f\x1d\xca\x13\x64\x43\x2a\x12\x13\x62\xe8\x86\x10\xba\xc6\x07\x18\x25\xb6\x7b\x3e\x0f\x55\xd5\xa7\x61\xe0\x1d\x58\xf3\x62\xc8\x69\xa2\x04\x2a\x06\xd8\xec\xff\x7c\xdf\xef\xff\x3f\x56\x80\xd1\x43\x64\x53\xc3\x84\xdd\x1b\x37\x6a\xae\x8a\x66\x39\x35\xe2\xa2\xba\xe0\xcb\xe8\x26\xa9\x64\xcd\x42\xd8\x67\x86\x70\x14\x4e\xec\x95\x90\x3b\x6c\xc3\x26\x9c\x97\x84\xf7\xd9\x09\x5b\x53\xe3\xa1\x02\x00\xf3\xe4\xec\x30\x02\x8c\xa7\x8e\xa7\x73\x23\x4c\xca\xf6\x5a\x27\x21\x47\x3b\x0a\x15\xf0\x38\xc0\xc8\x5a\x57\xec\xa9\xbd\x97\x10\x59\xd4\x71\x32\x35\x9e\xa9\x4d\x3c\x3c\x88\x4b\xf9\x38\xfb\x4d\x97\x45\xb2\xa4\xe2\xfc\xcb\x68\x76\x99\xee\x96\xd2\x2b\x2c\xc3\x86\x26\x77\xec\x75\x7b\x88\xbc\x5e\xd5\xab\xf5\x24\x98\x61\xf1\xb4\x4c\xf2\x77\x97\xbb\xd0\x15\x8b\x73\x5f\xdf\x80\x73\x1d\x0b\xea\x2e\x05\xbf\x1d\xc9\xa5\x9c\x5f\xb9\x1b\x52\x2a\xbf\x6f\xc4\x51\xff\xd1\xbf\xff\x80\xcf\xd5\xfe\x1f\x4e\xe8\x3f\x5b\x75\x1d\x81\x5a\x65\xb9\xb0\x39\x55\xa7\xaf\x00\x00\x00\xff\xff\xaa\x9c\xd1\x08\x4a\x02\x00\x00")

func ApiDataSchemaTodoJsonBytes() ([]byte, error) {
	return bindataRead(
		_ApiDataSchemaTodoJson,
		"../../api/data/schema/todo.json",
	)
}

func ApiDataSchemaTodoJson() (*asset, error) {
	bytes, err := ApiDataSchemaTodoJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../api/data/schema/todo.json", size: 586, mode: os.FileMode(420), modTime: time.Unix(1559110718, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../api/data/schema/todo.json": ApiDataSchemaTodoJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"api": &bintree{nil, map[string]*bintree{
				"data": &bintree{nil, map[string]*bintree{
					"schema": &bintree{nil, map[string]*bintree{
						"todo.json": &bintree{ApiDataSchemaTodoJson, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

